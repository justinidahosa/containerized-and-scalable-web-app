name: Terraform & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: infrastructure
  IMAGE_TAG: ${{ github.sha }}

jobs:
  plan-apply-build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Image
        run: |
          docker build -t "${{ secrets.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}" ./app
          docker push "${{ secrets.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}"

      - name: Update ECS Task Definition
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          sed -i "s/^image_tag *=.*/image_tag = \"${IMAGE_TAG}\"/g" terraform.tfvars || true
          terraform apply -auto-approve

      - name: Upload Frontend to S3
        if: github.ref == 'refs/heads/main'
        env:
          S3_FRONTEND_BUCKET: ${{ secrets.S3_FRONTEND_BUCKET }}
        run: |
          if [ -n "$S3_FRONTEND_BUCKET" ]; then
            echo "Uploading frontend assets to S3..."
            aws s3 sync ./frontend "s3://$S3_FRONTEND_BUCKET" --delete
          else
            echo "S3_FRONTEND_BUCKET secret not set — skipping upload."
          fi

      - name: Invalidate CloudFront Cache
        if: github.ref == 'refs/heads/main'
        env:
          CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
        run: |
          if [ -n "$CLOUDFRONT_DIST_ID" ]; then
            echo "Invalidating CloudFront cache..."
            aws cloudfront create-invalidation \
              --distribution-id "$CLOUDFRONT_DIST_ID" \
              --paths "/*"
          else
            echo "CLOUDFRONT_DIST_ID secret not set — skipping cache invalidation."
          fi
